/*
1.C
2.B
3.B
4.D
5.E
*/
//1
public Location dropLocationForColumn(int column) {
    int numRows = theGrid.getNumRows();
    Location tmp;
    for ( int n = numRows-1; n >= 0; n-- ) {
	tmp = new Location(n,column);
	if ( theGrid.get(tmp) == null )
	    return tmp;
    }
    return null;
}
public boolean dropMatchesNeighbors(int column, Color pieceColor) {
    Location loc = dropLocationForColumn(column);
    if (loc == null) {return false;}
    ArrayList<Piece> neighbors = theGrid.getNeighbors(loc);
    int ctr = 0;
    for (Piece p : neighbors) {
	if (p.getColor().equals(pieceColor))
	    ctr++;
    }
    return ctr >= 4; 
}
//2
import info.gridworld.actor.Bug;
public class LineBug extends Bug { 
    private int pathLen;
    public LineBug(int length) {
	pathLen = length;
    }
    public void act() {
	if ( pathLen > 0 ) {
	    move();
	    pathLen--;
	}
	else 
	    removeSelfFromGrid();
    }
}
public void act() {
    if (steps == 0) 
	setDirection(Location.NORTHEAST);
    else if (steps == length + 1) {
	moveTo(bottomRight);
	setDirection(Location.NORTHWEST);
    }
    else if (steps == 3*length+2) {
	moveTo(bottomLeft);
	setDirection(Location.NORTHEAST);
    }
    else if (steps >= 4*length+2) 
	removeSelfFromGrid();
    move();
    steps++;
}
	   
